from __future__ import absolute_import

import logging
import os
import tarfile

_logger = None


def update(config_archive, config_dir, config):
    global _logger
    _logger = logging.getLogger(__name__)
    update_applied = False

    # Figure out if an update is necessary
    if config.has_section('services'):
        # A service section indicates a config generated by a server < 0.9.0
        config.set('server', 'certfile', os.path.basename(config.get('server', 'certfile')))
        config.set('general', 'certfile', os.path.basename(config.get('general', 'certfile')))
        config.set('general', 'keyfile', os.path.basename(config.get('general', 'keyfile')))
        config.remove_option('general', 'sw_version')
        config.remove_option('network', 'interface')
        config.remove_section('services')
        update_applied = True
    if not config.has_option('general', 'service_network'):
        # Support for custom service network ranges starting with server 2.0
        config.set('general', 'service_network', '10.10.10.0/24')
        update_applied = True

    # Rewrite the config if an update did happen
    if update_applied:
        _logger.info('Updating sensor configuration file')
        with open('{}/honeysens.cfg'.format(config_dir), 'w') as f:
            config.write(f)
        # Rewrite config archive
        with tarfile.open(config_archive, 'w:gz') as config_archive:
            for f in os.listdir(config_dir):
                config_archive.add('{}/{}'.format(config_dir, f), f)
